{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Pictures\\\\Documents\\\\Desktop\\\\CodeCrux\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\n// src/components/ProtectedRoute.jsx\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext.jsx'; // Adjust path to your AuthContext\nimport { Loader2 } from 'lucide-react'; // Or your preferred loading spinner icon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    userInfo,\n    loading: authLoading\n  } = useAuth(); // Get user info and loading state from AuthContext\n  const location = useLocation(); // Get the current location\n\n  // 1. Handle Authentication Loading State:\n  // If the authentication status is still being determined (e.g., checking localStorage, validating token),\n  // display a loading indicator to prevent premature redirects or rendering.\n  if (authLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: 'calc(100vh - 100px)',\n        // Adjust height as needed (e.g., viewport height minus navbar)\n        color: '#a0a0b0' // Match your theme's text color\n      },\n      children: [/*#__PURE__*/_jsxDEV(Loader2, {\n        size: 48,\n        style: {\n          animation: 'spin 1.5s linear infinite',\n          color: '#4e8cff'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginTop: '1rem'\n        },\n        children: \"Loading authentication...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 2. Handle Unauthenticated User:\n  // If authentication is done loading AND there is no userInfo (meaning user is not logged in),\n  // redirect the user to the login page.\n  if (!userInfo) {\n    // Redirect them to the /login page, but save the current location they were\n    // trying to go to in `state.from`. This allows you to redirect them back to the\n    // intended page after they successfully log in.\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n    // `replace` prop ensures that the login page replaces the current entry in the history stack,\n    // so the user doesn't go back to the protected route by pressing the back button after being redirected.\n  }\n\n  // 3. Handle Authenticated User:\n  // If authentication is done loading AND userInfo exists (meaning user is logged in),\n  // render the child components that this ProtectedRoute is wrapping.\n  return children;\n};\n_s(ProtectedRoute, \"oeG5ZdErApLxa/nkvObtuJLTh4Y=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","Loader2","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","userInfo","loading","authLoading","location","style","display","flexDirection","justifyContent","alignItems","height","color","size","animation","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","to","state","from","replace","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Pictures/Documents/Desktop/CodeCrux/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["// src/components/ProtectedRoute.jsx\r\nimport React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext.jsx'; // Adjust path to your AuthContext\r\nimport { Loader2 } from 'lucide-react'; // Or your preferred loading spinner icon\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const { userInfo, loading: authLoading } = useAuth(); // Get user info and loading state from AuthContext\r\n  const location = useLocation(); // Get the current location\r\n\r\n  // 1. Handle Authentication Loading State:\r\n  // If the authentication status is still being determined (e.g., checking localStorage, validating token),\r\n  // display a loading indicator to prevent premature redirects or rendering.\r\n  if (authLoading) {\r\n    return (\r\n      <div style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: 'calc(100vh - 100px)', // Adjust height as needed (e.g., viewport height minus navbar)\r\n        color: '#a0a0b0' // Match your theme's text color\r\n      }}>\r\n        <Loader2 size={48} style={{ animation: 'spin 1.5s linear infinite', color: '#4e8cff' }} />\r\n        <p style={{ marginTop: '1rem' }}>Loading authentication...</p>\r\n        {/* Ensure @keyframes spin is defined in your global CSS:\r\n            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }\r\n        */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 2. Handle Unauthenticated User:\r\n  // If authentication is done loading AND there is no userInfo (meaning user is not logged in),\r\n  // redirect the user to the login page.\r\n  if (!userInfo) {\r\n    // Redirect them to the /login page, but save the current location they were\r\n    // trying to go to in `state.from`. This allows you to redirect them back to the\r\n    // intended page after they successfully log in.\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n    // `replace` prop ensures that the login page replaces the current entry in the history stack,\r\n    // so the user doesn't go back to the protected route by pressing the back button after being redirected.\r\n  }\r\n\r\n  // 3. Handle Authenticated User:\r\n  // If authentication is done loading AND userInfo exists (meaning user is logged in),\r\n  // render the child components that this ProtectedRoute is wrapping.\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,OAAO,QAAQ,4BAA4B,CAAC,CAAC;AACtD,SAASC,OAAO,QAAQ,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM;IAAEC,QAAQ;IAAEC,OAAO,EAAEC;EAAY,CAAC,GAAGT,OAAO,CAAC,CAAC,CAAC,CAAC;EACtD,MAAMU,QAAQ,GAAGX,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACA;EACA;EACA,IAAIU,WAAW,EAAE;IACf,oBACEN,OAAA;MAAKQ,KAAK,EAAE;QACVC,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE,QAAQ;QACpBC,MAAM,EAAE,qBAAqB;QAAE;QAC/BC,KAAK,EAAE,SAAS,CAAC;MACnB,CAAE;MAAAZ,QAAA,gBACAF,OAAA,CAACF,OAAO;QAACiB,IAAI,EAAE,EAAG;QAACP,KAAK,EAAE;UAAEQ,SAAS,EAAE,2BAA2B;UAAEF,KAAK,EAAE;QAAU;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1FpB,OAAA;QAAGQ,KAAK,EAAE;UAAEa,SAAS,EAAE;QAAO,CAAE;QAAAnB,QAAA,EAAC;MAAyB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAI3D,CAAC;EAEV;;EAEA;EACA;EACA;EACA,IAAI,CAAChB,QAAQ,EAAE;IACb;IACA;IACA;IACA,oBAAOJ,OAAA,CAACL,QAAQ;MAAC2B,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEjB;MAAS,CAAE;MAACkB,OAAO;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAClE;IACA;EACF;;EAEA;EACA;EACA;EACA,OAAOlB,QAAQ;AACjB,CAAC;AAACC,EAAA,CA1CIF,cAAc;EAAA,QACyBJ,OAAO,EACjCD,WAAW;AAAA;AAAA8B,EAAA,GAFxBzB,cAAc;AA4CpB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}