{"ast":null,"code":"// src/components/ProtectedRoute.jsx\nimport React from'react';import{Navigate,useLocation}from'react-router-dom';import{useAuth}from'../context/AuthContext.jsx';// Adjust path to your AuthContext\nimport{Loader2}from'lucide-react';// Or your preferred loading spinner icon\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children}=_ref;const{userInfo,loading:authLoading}=useAuth();// Get user info and loading state from AuthContext\nconst location=useLocation();// Get the current location\n// 1. Handle Authentication Loading State:\n// If the authentication status is still being determined (e.g., checking localStorage, validating token),\n// display a loading indicator to prevent premature redirects or rendering.\nif(authLoading){return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center',height:'calc(100vh - 100px)',// Adjust height as needed (e.g., viewport height minus navbar)\ncolor:'#a0a0b0'// Match your theme's text color\n},children:[/*#__PURE__*/_jsx(Loader2,{size:48,style:{animation:'spin 1.5s linear infinite',color:'#4e8cff'}}),/*#__PURE__*/_jsx(\"p\",{style:{marginTop:'1rem'},children:\"Loading authentication...\"})]});}// 2. Handle Unauthenticated User:\n// If authentication is done loading AND there is no userInfo (meaning user is not logged in),\n// redirect the user to the login page.\nif(!userInfo){// Redirect them to the /login page, but save the current location they were\n// trying to go to in `state.from`. This allows you to redirect them back to the\n// intended page after they successfully log in.\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});// `replace` prop ensures that the login page replaces the current entry in the history stack,\n// so the user doesn't go back to the protected route by pressing the back button after being redirected.\n}// 3. Handle Authenticated User:\n// If authentication is done loading AND userInfo exists (meaning user is logged in),\n// render the child components that this ProtectedRoute is wrapping.\nreturn children;};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","Loader2","jsx","_jsx","jsxs","_jsxs","ProtectedRoute","_ref","children","userInfo","loading","authLoading","location","style","display","flexDirection","justifyContent","alignItems","height","color","size","animation","marginTop","to","state","from","replace"],"sources":["C:/Users/HP/OneDrive/Pictures/Documents/Desktop/CodeCrux/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["// src/components/ProtectedRoute.jsx\r\nimport React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext.jsx'; // Adjust path to your AuthContext\r\nimport { Loader2 } from 'lucide-react'; // Or your preferred loading spinner icon\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const { userInfo, loading: authLoading } = useAuth(); // Get user info and loading state from AuthContext\r\n  const location = useLocation(); // Get the current location\r\n\r\n  // 1. Handle Authentication Loading State:\r\n  // If the authentication status is still being determined (e.g., checking localStorage, validating token),\r\n  // display a loading indicator to prevent premature redirects or rendering.\r\n  if (authLoading) {\r\n    return (\r\n      <div style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: 'calc(100vh - 100px)', // Adjust height as needed (e.g., viewport height minus navbar)\r\n        color: '#a0a0b0' // Match your theme's text color\r\n      }}>\r\n        <Loader2 size={48} style={{ animation: 'spin 1.5s linear infinite', color: '#4e8cff' }} />\r\n        <p style={{ marginTop: '1rem' }}>Loading authentication...</p>\r\n        {/* Ensure @keyframes spin is defined in your global CSS:\r\n            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }\r\n        */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 2. Handle Unauthenticated User:\r\n  // If authentication is done loading AND there is no userInfo (meaning user is not logged in),\r\n  // redirect the user to the login page.\r\n  if (!userInfo) {\r\n    // Redirect them to the /login page, but save the current location they were\r\n    // trying to go to in `state.from`. This allows you to redirect them back to the\r\n    // intended page after they successfully log in.\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n    // `replace` prop ensures that the login page replaces the current entry in the history stack,\r\n    // so the user doesn't go back to the protected route by pressing the back button after being redirected.\r\n  }\r\n\r\n  // 3. Handle Authenticated User:\r\n  // If authentication is done loading AND userInfo exists (meaning user is logged in),\r\n  // render the child components that this ProtectedRoute is wrapping.\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CACxD,OAASC,OAAO,KAAQ,4BAA4B,CAAE;AACtD,OAASC,OAAO,KAAQ,cAAc,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExC,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClC,KAAM,CAAEE,QAAQ,CAAEC,OAAO,CAAEC,WAAY,CAAC,CAAGX,OAAO,CAAC,CAAC,CAAE;AACtD,KAAM,CAAAY,QAAQ,CAAGb,WAAW,CAAC,CAAC,CAAE;AAEhC;AACA;AACA;AACA,GAAIY,WAAW,CAAE,CACf,mBACEN,KAAA,QAAKQ,KAAK,CAAE,CACVC,OAAO,CAAE,MAAM,CACfC,aAAa,CAAE,QAAQ,CACvBC,cAAc,CAAE,QAAQ,CACxBC,UAAU,CAAE,QAAQ,CACpBC,MAAM,CAAE,qBAAqB,CAAE;AAC/BC,KAAK,CAAE,SAAU;AACnB,CAAE,CAAAX,QAAA,eACAL,IAAA,CAACF,OAAO,EAACmB,IAAI,CAAE,EAAG,CAACP,KAAK,CAAE,CAAEQ,SAAS,CAAE,2BAA2B,CAAEF,KAAK,CAAE,SAAU,CAAE,CAAE,CAAC,cAC1FhB,IAAA,MAAGU,KAAK,CAAE,CAAES,SAAS,CAAE,MAAO,CAAE,CAAAd,QAAA,CAAC,2BAAyB,CAAG,CAAC,EAI3D,CAAC,CAEV,CAEA;AACA;AACA;AACA,GAAI,CAACC,QAAQ,CAAE,CACb;AACA;AACA;AACA,mBAAON,IAAA,CAACL,QAAQ,EAACyB,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAEb,QAAS,CAAE,CAACc,OAAO,MAAE,CAAC,CAClE;AACA;AACF,CAEA;AACA;AACA;AACA,MAAO,CAAAlB,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}