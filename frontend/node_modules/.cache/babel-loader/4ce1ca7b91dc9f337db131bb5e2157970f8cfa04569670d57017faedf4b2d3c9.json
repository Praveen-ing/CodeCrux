{"ast":null,"code":"// frontend/src/api/apiService.js\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor to add JWT token to requests\napiClient.interceptors.request.use(config => {\n  // console.log('[apiService Interceptor] Intercepting request to:', config.url); // Keep for debugging if needed\n  const userInfo = localStorage.getItem('userInfo');\n  if (userInfo) {\n    try {\n      const {\n        token\n      } = JSON.parse(userInfo);\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n    } catch (e) {\n      console.error(\"Error parsing userInfo from localStorage\", e);\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// --- Auth Service ---\nexport const loginUser = credentials => apiClient.post('/auth/login', credentials);\nexport const registerUser = userData => apiClient.post('/auth/register', userData);\nexport const getUserProfile = () => apiClient.get('/auth/me');\n\n// ADD THIS FUNCTION:\nexport const updateUserProfile = profileData => apiClient.put('/auth/profile', profileData);\n\n// --- Contest Service ---\nexport const fetchContestsAPI = params => apiClient.get('/contests', {\n  params\n});\n\n// --- Dashboard Service ---\nexport const fetchUserDashboardStatsAPI = () => apiClient.get('/dashboard/stats');\n\n// --- Daily Challenge Service ---\nexport const fetchDailyChallengeAPI = () => apiClient.get('/daily-challenge');\nexport const markDailyChallengeSolvedAPI = () => apiClient.post('/daily-challenge/solve');\n\n// --- Problem Service ---\nexport const fetchProblemsAPI = params => apiClient.get('/problem-list', {\n  params\n});\nexport const markProblemSolvedAPI = problemData => apiClient.post('/problem-list/solve', problemData);\n\n// --- Favorites Service ---\nexport const fetchFavoriteProblemsAPI = () => apiClient.get('/favorites/problems');\nexport const addProblemToFavoritesAPI = problemData => apiClient.post('/favorites/problems', problemData);\nexport const removeProblemFromFavoritesAPI = (platform, problemId) => apiClient.delete(`/favorites/problems/${platform}/${encodeURIComponent(problemId)}`);\nexport const fetchFavoriteContestsAPI = () => apiClient.get('/favorites/contests');\nexport const addContestToFavoritesAPI = contestData => apiClient.post('/favorites/contests', contestData);\nexport const removeContestFromFavoritesAPI = identifier => apiClient.delete(`/favorites/contests/${identifier}`);\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","userInfo","localStorage","getItem","token","JSON","parse","e","console","error","Promise","reject","loginUser","credentials","post","registerUser","userData","getUserProfile","get","updateUserProfile","profileData","put","fetchContestsAPI","params","fetchUserDashboardStatsAPI","fetchDailyChallengeAPI","markDailyChallengeSolvedAPI","fetchProblemsAPI","markProblemSolvedAPI","problemData","fetchFavoriteProblemsAPI","addProblemToFavoritesAPI","removeProblemFromFavoritesAPI","platform","problemId","delete","encodeURIComponent","fetchFavoriteContestsAPI","addContestToFavoritesAPI","contestData","removeContestFromFavoritesAPI","identifier"],"sources":["C:/Users/HP/OneDrive/Pictures/Documents/Desktop/CodeCrux/frontend/src/api/apiService.js"],"sourcesContent":["// frontend/src/api/apiService.js\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor to add JWT token to requests\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    // console.log('[apiService Interceptor] Intercepting request to:', config.url); // Keep for debugging if needed\r\n    const userInfo = localStorage.getItem('userInfo');\r\n    if (userInfo) {\r\n      try {\r\n        const { token } = JSON.parse(userInfo);\r\n        if (token) {\r\n          config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error parsing userInfo from localStorage\", e);\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// --- Auth Service ---\r\nexport const loginUser = (credentials) => apiClient.post('/auth/login', credentials);\r\nexport const registerUser = (userData) => apiClient.post('/auth/register', userData);\r\nexport const getUserProfile = () => apiClient.get('/auth/me');\r\n\r\n// ADD THIS FUNCTION:\r\nexport const updateUserProfile = (profileData) => apiClient.put('/auth/profile', profileData);\r\n\r\n// --- Contest Service ---\r\nexport const fetchContestsAPI = (params) => apiClient.get('/contests', { params });\r\n\r\n// --- Dashboard Service ---\r\nexport const fetchUserDashboardStatsAPI = () => apiClient.get('/dashboard/stats');\r\n\r\n// --- Daily Challenge Service ---\r\nexport const fetchDailyChallengeAPI = () => apiClient.get('/daily-challenge');\r\nexport const markDailyChallengeSolvedAPI = () => apiClient.post('/daily-challenge/solve');\r\n\r\n// --- Problem Service ---\r\nexport const fetchProblemsAPI = (params) => apiClient.get('/problem-list', { params });\r\nexport const markProblemSolvedAPI = (problemData) => apiClient.post('/problem-list/solve', problemData);\r\n\r\n// --- Favorites Service ---\r\nexport const fetchFavoriteProblemsAPI = () => apiClient.get('/favorites/problems');\r\nexport const addProblemToFavoritesAPI = (problemData) => apiClient.post('/favorites/problems', problemData);\r\nexport const removeProblemFromFavoritesAPI = (platform, problemId) => apiClient.delete(`/favorites/problems/${platform}/${encodeURIComponent(problemId)}`);\r\n\r\nexport const fetchFavoriteContestsAPI = () => apiClient.get('/favorites/contests');\r\nexport const addContestToFavoritesAPI = (contestData) => apiClient.post('/favorites/contests', contestData);\r\nexport const removeContestFromFavoritesAPI = (identifier) => apiClient.delete(`/favorites/contests/${identifier}`);\r\n\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}